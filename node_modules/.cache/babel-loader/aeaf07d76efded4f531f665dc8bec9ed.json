{"ast":null,"code":"var _jsxFileName = \"/home/japneetsingh/Documents/React_Tutorilals/Assignment/calculator/src/buttons.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Button(_ref) {\n  let {\n    number,\n    query,\n    setQuery,\n    intermediate_result,\n    setIntermediateResult,\n    result,\n    setResult,\n    operator,\n    setOperator\n  } = _ref;\n\n  let store_in_history = () => {};\n\n  let updateText = ev => {\n    if (ev.target.value == \"=\") {\n      store_in_history();\n    } else if (ev.target.value == \"C\") {\n      setQuery(0);\n      setIntermediateResult(0);\n      setResult(0);\n      setOperator(\"\");\n      return;\n    } else if (ev.target.value == \"CE\") {\n      setQuery(query.slice(0, query.lastIndexOf(\"+\") + 1));\n      setResult(intermediate_result);\n      return;\n    } else if (ev.target.value == \"<-\") {\n      setQuery(query.slice(0, query.length));\n      return;\n    }\n\n    if (query == 0) {\n      setQuery(ev.target.value);\n    } else {\n      setQuery(prev_value => String(prev_value) + ev.target.value);\n\n      if ([\"/\", \"X\", \"-\", \"+\"].includes(ev.target.value)) {\n        result ? setIntermediateResult(result) : setIntermediateResult(query);\n        setOperator(ev.target.value);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: number,\n      onClick: ev => updateText(ev)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c = Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/home/japneetsingh/Documents/React_Tutorilals/Assignment/calculator/src/buttons.js"],"names":["Button","number","query","setQuery","intermediate_result","setIntermediateResult","result","setResult","operator","setOperator","store_in_history","updateText","ev","target","value","slice","lastIndexOf","length","prev_value","String","includes"],"mappings":";;;AAAA,eAAe,SAASA,MAAT,OAUZ;AAAA,MAV4B;AAC7BC,IAAAA,MAD6B;AAE7BC,IAAAA,KAF6B;AAG7BC,IAAAA,QAH6B;AAI7BC,IAAAA,mBAJ6B;AAK7BC,IAAAA,qBAL6B;AAM7BC,IAAAA,MAN6B;AAO7BC,IAAAA,SAP6B;AAQ7BC,IAAAA,QAR6B;AAS7BC,IAAAA;AAT6B,GAU5B;;AACD,MAAIC,gBAAgB,GAAG,MAAM,CAAE,CAA/B;;AAEA,MAAIC,UAAU,GAAIC,EAAD,IAAQ;AACvB,QAAIA,EAAE,CAACC,MAAH,CAAUC,KAAV,IAAmB,GAAvB,EAA4B;AAC1BJ,MAAAA,gBAAgB;AACjB,KAFD,MAEO,IAAIE,EAAE,CAACC,MAAH,CAAUC,KAAV,IAAmB,GAAvB,EAA4B;AACjCX,MAAAA,QAAQ,CAAC,CAAD,CAAR;AACAE,MAAAA,qBAAqB,CAAC,CAAD,CAArB;AACAE,MAAAA,SAAS,CAAC,CAAD,CAAT;AACAE,MAAAA,WAAW,CAAC,EAAD,CAAX;AACA;AACD,KANM,MAMA,IAAIG,EAAE,CAACC,MAAH,CAAUC,KAAV,IAAmB,IAAvB,EAA6B;AAClCX,MAAAA,QAAQ,CAACD,KAAK,CAACa,KAAN,CAAY,CAAZ,EAAeb,KAAK,CAACc,WAAN,CAAkB,GAAlB,IAAyB,CAAxC,CAAD,CAAR;AACAT,MAAAA,SAAS,CAACH,mBAAD,CAAT;AACA;AACD,KAJM,MAIA,IAAIQ,EAAE,CAACC,MAAH,CAAUC,KAAV,IAAmB,IAAvB,EAA6B;AAClCX,MAAAA,QAAQ,CAACD,KAAK,CAACa,KAAN,CAAY,CAAZ,EAAeb,KAAK,CAACe,MAArB,CAAD,CAAR;AACA;AACD;;AAED,QAAIf,KAAK,IAAI,CAAb,EAAgB;AACdC,MAAAA,QAAQ,CAACS,EAAE,CAACC,MAAH,CAAUC,KAAX,CAAR;AACD,KAFD,MAEO;AACLX,MAAAA,QAAQ,CAAEe,UAAD,IAAgBC,MAAM,CAACD,UAAD,CAAN,GAAqBN,EAAE,CAACC,MAAH,CAAUC,KAAhD,CAAR;;AACA,UAAI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqBM,QAArB,CAA8BR,EAAE,CAACC,MAAH,CAAUC,KAAxC,CAAJ,EAAoD;AAClDR,QAAAA,MAAM,GAAGD,qBAAqB,CAACC,MAAD,CAAxB,GAAmCD,qBAAqB,CAACH,KAAD,CAA9D;AACAO,QAAAA,WAAW,CAACG,EAAE,CAACC,MAAH,CAAUC,KAAX,CAAX;AACD;AACF;AACF,GA3BD;;AA6BA,sBACE;AAAA,2BACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,KAAK,EAAEb,MAFT;AAGE,MAAA,OAAO,EAAGW,EAAD,IAAQD,UAAU,CAACC,EAAD;AAH7B;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AASD;KAnDuBZ,M","sourcesContent":["export default function Button({\n  number,\n  query,\n  setQuery,\n  intermediate_result,\n  setIntermediateResult,\n  result,\n  setResult,\n  operator,\n  setOperator,\n}) {\n  let store_in_history = () => {};\n\n  let updateText = (ev) => {\n    if (ev.target.value == \"=\") {\n      store_in_history();\n    } else if (ev.target.value == \"C\") {\n      setQuery(0);\n      setIntermediateResult(0);\n      setResult(0);\n      setOperator(\"\");\n      return;\n    } else if (ev.target.value == \"CE\") {\n      setQuery(query.slice(0, query.lastIndexOf(\"+\") + 1));\n      setResult(intermediate_result);\n      return;\n    } else if (ev.target.value == \"<-\") {\n      setQuery(query.slice(0, query.length));\n      return;\n    }\n\n    if (query == 0) {\n      setQuery(ev.target.value);\n    } else {\n      setQuery((prev_value) => String(prev_value) + ev.target.value);\n      if ([\"/\", \"X\", \"-\", \"+\"].includes(ev.target.value)) {\n        result ? setIntermediateResult(result) : setIntermediateResult(query);\n        setOperator(ev.target.value);\n      }\n    }\n  };\n\n  return (\n    <>\n      <input\n        type=\"button\"\n        value={number}\n        onClick={(ev) => updateText(ev)}\n      ></input>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}